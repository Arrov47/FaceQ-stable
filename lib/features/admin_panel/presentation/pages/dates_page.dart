import 'package:clipboard/clipboard.dart';import 'package:dropdown_search/dropdown_search.dart';import 'package:faceq/core/widgets/progess_loading.dart';import 'package:faceq/features/admin_panel/domain/use_cases/local_storage/delete_credentials.dart';import 'package:faceq/features/admin_panel/domain/use_cases/show_snackbar.dart';import 'package:faceq/features/admin_panel/presentation/bloc/get_dates/load_groups/load_groups_bloc.dart';import 'package:faceq/features/admin_panel/presentation/bloc/get_dates/load_report/load_report_bloc.dart';import 'package:faceq/features/admin_panel/presentation/widgets/NavigationBar/NavigationSideBar.dart';import 'package:faceq/features/auth/presentation/pages/check_password_page.dart';import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:intl/intl.dart';class DatesPage extends StatefulWidget {  const DatesPage({super.key, required this.storageResult});  final Map<String, dynamic> storageResult;  static route(Map<String, dynamic> storageResult) => MaterialPageRoute(        builder: (context) => DatesPage(          storageResult: storageResult,        ),      );  @override  State<DatesPage> createState() => _DatesPageState();}class _DatesPageState extends State<DatesPage> {  final _scaffoldKey = GlobalKey<ScaffoldState>();  String? _selectedDate;  String _selectedGroup = '';  @override  Widget build(BuildContext context) {    print("Side BAR STORAGE${widget.storageResult}");    return SafeArea(      child: Scaffold(        key: _scaffoldKey,        appBar: AppBar(          title: Icon(            Icons.bar_chart_outlined,            color: Theme.of(context).iconTheme.color,          ),          centerTitle: true,          leading: IconButton(              onPressed: () {                if (_scaffoldKey.currentState != null) {                  _scaffoldKey.currentState!.openDrawer();                }              },              icon: const Icon(Icons.menu)),        ),        body: Column(          children: [            BlocConsumer<LoadGroupsBloc, LoadGroupsState>(                builder: (context, state) {                  if (state is GroupsLoaded) {                    return Container(                      margin: const EdgeInsets.all(20.0),                      child: DropdownSearch<String>(                        items: List.generate(state.groups.length, (index) {                          return state.groups[index];                        }),                        dropdownDecoratorProps: DropDownDecoratorProps(                          baseStyle: Theme.of(context).textTheme.labelLarge,                          dropdownSearchDecoration: InputDecoration(                            enabledBorder: Theme.of(context)                                .inputDecorationTheme                                .enabledBorder,                            labelStyle: Theme.of(context)                                .inputDecorationTheme                                .labelStyle,                            errorStyle: Theme.of(context)                                .inputDecorationTheme                                .errorStyle,                            helperStyle: Theme.of(context)                                .inputDecorationTheme                                .helperStyle,                            border: OutlineInputBorder(),                            labelText: "Выберите группу",                          ),                        ),                        popupProps: PopupProps.menu(                          itemBuilder: (context, name, b) {                            return InkWell(                              onTap: () {},                              child: ListTile(                                title: Text(                                  name,                                  style: Theme.of(context).textTheme.labelLarge,                                ),                              ),                            );                          },                          menuProps: MenuProps(                            shadowColor: Theme.of(context).iconTheme.color,                            backgroundColor:                                Theme.of(context).scaffoldBackgroundColor,                          ),                          showSearchBox: true,                          searchFieldProps: TextFieldProps(                            autocorrect: false,                            style: Theme.of(context).textTheme.labelLarge,                            decoration: InputDecoration(                              enabledBorder: Theme.of(context)                                  .inputDecorationTheme                                  .enabledBorder,                              hintStyle: Theme.of(context)                                  .inputDecorationTheme                                  .hintStyle,                              errorStyle: Theme.of(context)                                  .inputDecorationTheme                                  .errorStyle,                              helperStyle: Theme.of(context)                                  .inputDecorationTheme                                  .helperStyle,                            ),                          ),                        ),                        onChanged: (name) {                          setState(() {                            if (name != null) {                              _selectedGroup = name;                            }                          });                        },                      ),                    );                  } else if (state is GroupsLoadFailed) {                    IconButton(                        onPressed: () {                          context.read<LoadGroupsBloc>().add(                              LoadGroups(token: widget.storageResult['token']));                        },                        icon: const Icon(                          Icons.restart_alt,                        ));                  }                  return const ProgressLoading();                },                listener: (context, state) {}),            Container(              margin: const EdgeInsets.all(5.0),              child: Row(                children: [                  Expanded(                      child: Divider(                    height: 2.0,                    color: Theme.of(context).iconTheme.color,                  )),                  Padding(                    padding: const EdgeInsets.symmetric(horizontal: 8),                    child: Text(                      "Выберите дату: ",                      style: TextStyle(color: Colors.blue.shade400),                    ),                  ),                  Expanded(                      child: Divider(                    height: 2.0,                    color: Theme.of(context).iconTheme.color,                  )),                ],              ),            ),            Padding(              padding:                  const EdgeInsets.symmetric(vertical: 20.0, horizontal: 5.0),              child: ElevatedButton(                  onPressed: () async {                    await showDatePicker(                            initialDate: DateTime.now(),                            context: context,                            firstDate: DateTime(2024, 7),                            lastDate: DateTime(2046, 12))                        .then((picked) async {                      if (picked != null) {                        setState(() {                          _selectedDate =                              DateFormat("yyyy-MM-dd").format(picked);                        });                      }                    });                  },                  child: const Padding(                    padding:                        EdgeInsets.symmetric(vertical: 8.0, horizontal: 15.0),                    child: Text("Выбрать дату"),                  )),            ),            Text(              _selectedDate ?? "Дата не выбрано",              style: Theme.of(context).textTheme.titleMedium,            ),            const SizedBox(              height: 10.0,            ),            Padding(              padding: const EdgeInsets.all(8.0),              child: ElevatedButton(                  onPressed: () {                    if (_selectedDate != null) {                      context.read<LoadReportBloc>().add(LoadReport(                          token: widget.storageResult['token'],                          date: _selectedDate ??                              DateFormat("yyyy-MM-dd").format(DateTime.now()),                          groupName: _selectedGroup));                    }                  },                  child: Text("Показать отчёт")),            ),            Divider(              height: 2.0,              color: Theme.of(context).iconTheme.color,            ),            BlocConsumer<LoadReportBloc, LoadReportState>(                builder: (context, state) {              print(state);              if (state is ReportLoaded) {                return Expanded(                    child: ListView(                  children: List.generate(state.users.length, (index) {                    final user = state.users[index];                    return Card(                      margin: const EdgeInsets.symmetric(                          horizontal: 5, vertical: 10),                      child: InkWell(                        onTap: () {                          showDialog(                              context: context,                              builder: (context) {                                return AlertDialog(                                  backgroundColor: Theme.of(context).scaffoldBackgroundColor,                                  shadowColor: Theme.of(context).iconTheme.color,                                  // scrollable: true,                                  icon: Text(                                    textAlign: TextAlign.center,                                      "${user.name} ${user.surname} ${user.fathersName}",                                      style: Theme.of(context)                                          .textTheme                                          .headlineMedium),                                  contentPadding:                                      EdgeInsets.symmetric(horizontal: 50,vertical: 10),                                  content: SingleChildScrollView(child: Column(                                    children: [                                      ...List.generate(user.log.length, (index) {                                        final log = user.log[index];                                        return Row(                                          mainAxisAlignment:                                              MainAxisAlignment.spaceBetween,                                          children: [                                            Text(log['type'],style: Theme.of(context).textTheme.titleMedium,),                                            Text(log['time'],style: Theme.of(context).textTheme.titleMedium,),                                          ],                                        );                                      })                                    ],                                  )),                                  // content: Column(                                  //   children: List.generate(user.log.length, (index){                                  //     final log = user.log[index];                                  //     return Row(                                  //       mainAxisAlignment: MainAxisAlignment.spaceBetween,                                  //       children: [                                  //         Text(log['type']),                                  //         Text(log['time']),                                  //       ],                                  //     );                                  //   }),),                                  actions: [                                    ElevatedButton(                                        onPressed: () {                                          FlutterClipboard.copy(user.id)                                              .then((_) {                                            showSnackBar(                                                "id пользователя скопирован",                                                context,                                                Colors.green);                                          });                                        },                                        child: const Text("Скопировать id")),                                    ElevatedButton(                                        onPressed: () {                                          Navigator.pop(context);                                        },                                        child: const Text("Ok")),                                  ],                                );                              });                        },                        child: ListTile(                          title: Text(                            "${user.name} ${user.surname} ${user.fathersName}",                            style: Theme.of(context).textTheme.labelLarge,                          ),                          trailing: user.log.isEmpty                              ? const Icon(                                  Icons.close,                                  color: Colors.red,                                )                              : const Icon(                                  Icons.check_circle,                                  color: Colors.green,                                ),                        ),                      ),                    );                  }),                ));              } else if (state is ReportLoading) {                return const ProgressLoading();              } else {                return Container();              }            }, listener: (context, state) {              if (state is ReportLoadFailed) {                showSnackBar(state.message, context, Colors.red);              }            })          ],        ),        drawer: NavigationSideBar(          scaffoldKey: _scaffoldKey,          storageResult: widget.storageResult,        ),      ),    );  }  _signOut() {    deleteCredentials();    Navigator.pushAndRemoveUntil(_scaffoldKey.currentState!.context,        CheckPasswordPage.route(), (route) => false);  }}